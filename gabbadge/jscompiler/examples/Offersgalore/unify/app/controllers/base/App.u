class App
{
    private _controller;

    private _url;

    private _deviceType;

    private _name;

	use Singleton;

    private  __construct(String appName) -> define("APP_NAME",_name =  appName);

    /**
     * @return array|null
     */
    public  parseUrl()
            {
        return _url = isset(_GET['url']) ? explode('/', rtrim(filter_var(_GET['url'], FILTER_SANITIZE_URL), '/'))    : self.redirect("Home/index", {error:'no'});
    }


    /**
     * responds to the requested page;
     * */
    respond()
    {

		//declare a temp url
        $url = parseUrl()
        $controller_name = ucfirst($url[0])
        /**TODO
         * Thought if we want to have controllers that share a location
         * changes have to be made to this logic.
         * Change the page that is to be the landing for non existing controllers
         * @redirect = required page
         */
        $redirect = "Home"

        $missing_controller_error = 'Page is in construction mode. We will get back to you soon'
        // check if a view is requested.
        isset(url[1]) ?: self.redirect(controller_name . "/index")

        $view = url[1];

        // check if controller is there || check if there is a folder for the controller

        if (($boolean = file_exists("app/controllers/gui/views/{$controller_name}.php")) || folder_exists("app/gui/views/" . strtolower($controller_name))) {

            _controller = boolean ? new $controller_name() : new View();

            this._controller.controller_name = controller_name;

            this._controller.controller = this._controller;


            this._controller.view = view;

            !isset(_SERVER['HTTP_REFERER']) ?: this._controller.previous_page = _SERVER['HTTP_REFERER'];

            call_user_func([this._controller, this._controller.view]);

        } else self.redirect("$redirect/index", ['error' => missing_controller_error, 'page' => controller_name]);

    }

    /**
     * @param $location
     * @param array|string $data key=>value spaces represented by underscores
     * @return null
     *
     */

    public static  redirect(String location,Array data = [])
    {

        if (!is_array(data)) {
            data = array((data = explode('=', data))[0] => data[1]);
        }

        $errors = "";

        if ($count = count(data)) {
            $i = 0;
            errors .= '?';
            data.each((error,value) -> errors.= "$error=" . value . (i < $count - 1 ? '&' : ''))
        }

        /// TODO change this in case to upload to server
        header("location:http://" . _APP_ROOT_ . "$location" . "$errors");

        return null;
    }

    /**
     * TODO
     * Evaluates the type of the system and
     * requests for the required type of page with.
     * for mobile devices and also for pc version.
     * this would not be necessary if the page is responsive but useful
     * for javascript disabled phones.
     *
     */
    deviceType()
    {
        /**
         * TODO
         * This code is to decide the type of device in use and perform the necessary
         */

        this._deviceType = "laptop"

    }


    public  secureLink()
    {

    }
}


