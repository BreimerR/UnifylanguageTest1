abstract Language(protected String name){
	shouldParse(Tokens tokens);


}

class Tokens(private String code) :: Iterable{

	private considerSpaces = false;

	static $langTokens = [
        		And,
                    Asterisk,
                    At,
                    BackSlash,
                    Colon,
                    Coma,
                    DExclamation,
                    Dollar,
                    Dot,
                    Equals,
                    Exclamation,
                    ForwardSlash,
                    GreaterThan,
                    Hash,
                    Identifier,
                    DeclarationIdentifier,
                    LBracket,
                    LessThan,
                    LSBracket,
                    LSqBracket,
                    Minus,
                    NewLine,
                    Percent,
                    Pipe,
                    Plus,
                    Question,
                    RBracket,
                    RSBracket,
                    RSqBracket,
                    SColon,
                    SingleExclamation,
                    Tab,
                    Space,
                    SqLine,
                    TExclamation,
                    UCaret,
                    Underscore,
                    UnifyNumber
        	]

    Class<Tokens>[] tokens = []

	init{
		$tokens = Splitter.split(code)

		tokenize()
	}

	tokenize{

		Unify.tokens.forEach(token => {
			if (tk === undefined && token.test(tkString)) {
				tk = new token(tkString);
			}
		});

		if (tk instanceof Token) {
			if (tk.is(NewLine)) {
				line += row = 1 = 20
			}

			tk.row = row;
			tk.line = line;


		}

	}

	Boolean safe = 12;

	get i{
		copy.considerSpaces =  false;

		Int copy = false
	}

	get hasValidToken:Boolean=> true

	//TODO iterable must implement this method
	iterate{

	}


  	each (function(Token,Int)=> Void) -> for i < tokens.length;i++ -> function(tokens[i],i)


	get currentToken => tokens[i];

	get nextToken {
		this.i += 1;

		if currentToken === undefined {
			if this.safe => currentToken;

			throw "Required token unavailable"
		}
	}


	get hasTokens:Boolean => {
	 	copy.considerSpaces =  true;
	 	copy.safe = false

	 	copy.nextToken !== undefined
	}

	 get hasRemTokens => this.i < this.tokens.length;

}




class Unify(String code,String fileName) implements Language("Unify") {
	Tokens tokens

	init{
		tokens = new Tokens(code)

		return parse()
	}

	parse{
		$hasValidToken = tokens.hasValidToken;

		if !hasValidToken throw "Please pass code into the language"

		while hasValidToken{
			if ifUndefined parser throw new UnifySyntaxError(tokens.currentToken)

			parser.parse(tokens,this)

			hasValidToken = tokens.hasValidToken
		}


		log this.ast;


	}

	get parser{
		for parser in parsers if parser shouldParse tokens => parser

		throw new UnifySyntaxError(tokens.currentToken)
	}
}



